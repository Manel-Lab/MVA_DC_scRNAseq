Bootstrap: docker
From: ubuntu:18.04
IncludeCmd: yes

%environment
  R_VERSION=3.6.3
  export R_VERSION
  R_CONFIG_DIR=/etc/R/
  export R_CONFIG_DIR
  export LC_ALL=C
  export PATH=$PATH

%labels
  Author Ron Hart
  Version v0.0.5
  R_Version 3.6.3
  build_date 2020 Feb 29
  R_bioconductor True

%apprun R
  exec R "$@"

%apprun Rscript
  exec Rscript "$@"

%apprun bash
  exec bash "$@"

%runscript
  exec bash "$@"

%post
  apt-get update
  apt-get install -y apt-transport-https apt-utils software-properties-common
  apt-get install -y add-apt-key
  export DEBIAN_frontend=noninteractive
  ln -fs /usr/share/zoneinfo/Europe/Paris /etc/localtime
  apt-get install -y tzdata
  dpkg-reconfigure --frontend noninteractive tzdata

  # Create some useful mountpoints to be used in addition to /mnt
  mkdir /project
  mkdir /software

  # Install cellranger
  apt-get install -y wget nano curl
  wget -O /software/cellranger-4.0.0.tar.gz "https://cf.10xgenomics.com/releases/cell-exp/cellranger-4.0.0.tar.gz?Expires=1608522834&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9jZi4xMHhnZW5vbWljcy5jb20vcmVsZWFzZXMvY2VsbC1leHAvY2VsbHJhbmdlci00LjAuMC50YXIuZ3oiLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE2MDg1MjI4MzR9fX1dfQ__&Signature=fmB4bCaoZkUqmFWb~tCilHwbCO-ZwJxy9dttEMJfvYtj9KTrcOuc6jJiWXlk-i5SzHR-I2F1tBon9IkN2U5sRXUucObRfYDme0yHrs1lH6yZrdSzuKtMnn2TxWozT~HSueIk~0lSz2WBebfhPce8jdm0Ckxl3~c-Wtc9SER391Dy0J5DP7-x2N0scucX6qEvEGJsSOKf16BwJoQdA1mzXaJ0QmrJoTa8J-wg6eCKO8wwLHDMtGdGPdS1nuaOzWumiYR-oUIsjjo85BvUXIKmfEW8uO1~QoInNzSp-jQbO9fPxMC-IO0~T2WgQVHBA49rOpW~O75SIx~EU9J3cpOG-Q__&Key-Pair-Id=APKAI7S6A5RYOXBWRPDA"
  tar -xzvf /software/cellranger-4.0.0.tar.gz -C "/usr/local/"
  export PATH="/usr/local/cellranger-4.0.0/:$PATH"
  rm /software/cellranger-4.0.0.tar.gz

  #add CRAN/Ubuntu repo, add key, then refresh
  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
  add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/'
  apt-get -y update

  apt-get install -y libblas3 libblas-dev liblapack-dev liblapack3
  apt-get install -y gcc fort77 aptitude
  aptitude install -y g++
  aptitude install -y xorg-dev
  aptitude install -y libreadline-dev
  aptitude install -y gfortran
  gfortran --version
  apt-get install -y libssl-dev libxml2-dev libpcre3-dev liblzma-dev libbz2-dev libcurl4-openssl-dev
  apt-get install -y libhdf5-dev hdf5-helpers libmariadb-client-lgpl-dev
  apt-get install -y libcurl3-gnutls
  apt-get install -y libgtk-3-dev libfreetype6-dev libx11-dev libxinerama-dev libxrandr-dev libxcursor-dev mesa-common-dev libasound2-dev freeglut3-dev libxcomposite-dev

  # Install conda and snakemake
  #CONDA_INSTALL_PATH="/usr/local/anaconda3"
  #wget -O /software/Anaconda3-2020.11-Linux-x86_64.sh https://repo.anaconda.com/archive/Anaconda3-2020.11-Linux-x86_64.sh
  #chmod +x /software/Anaconda3-2020.11-Linux-x86_64.sh
  #bash /software/Anaconda3-2020.11-Linux-x86_64.sh -b -f -p $CONDA_INSTALL_PATH
  #export PATH="/usr/local/anaconda3/bin:$PATH"
  #Conda configuration of channels from .condarc file
  #conda config --file /.condarc --add channels defaults
  #conda config --file /.condarc --add channels conda-forge
  #conda config --file /.condarc --add channels bioconda
  #conda update conda
  # List installed environments
  #conda list
  # Install snakemake
  #conda install -c conda-forge mamba
  #mamba create -c conda-forge -c bioconda -n snakemake snakemake
  #rm /software/Anaconda3-2020.11-Linux-x86_64.sh

  # Install perl
  curl -L http://xrl.us/installperlnix | bash

  lsb_release -a
  apt-get install -y r-base-core=3.6.3-1bionic r-base=3.6.3-1bionic r-base-dev=3.6.3-1bionic r-recommended=3.6.3-1bionic r-doc-html=3.6.3-1bionic

  R --version

  # installing packages from cran
  R --vanilla --slave -e 'install.packages("remotes", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("tibble", version = "3.0.4", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("readr", version = "1.4.0", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("dplyr", version = "1.0.2", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("tidyr", version = "1.1.2", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("ggplot2", version = "3.3.2", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("future", version = "1.20.1", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("pheatmap", version = "1.0.12", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("Seurat", version = "3.2.2", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("gridExtra",version = "2.3", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("clusteval", version = "0.1", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("doFuture", version = "0.10.0", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("future.batchtools", version = "0.9.0", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("foreach", version = "1.5.0", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("factoextra", version = "1.0.7", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("rjson", version = "0.2.20", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("R.utils", version = "2.9.2", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(remotes) ; install_version("ggpmisc", version = "0.3.4", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'install.packages("BiocManager", repos = "https://cran.rstudio.com/")'
  R --vanilla --slave -e 'library(BiocManager); BiocManager::install(version="3.10", ask = FALSE)'

  # install rcppannoy from source for BiocNeighbors compatibility
  R --vanilla --slave -e 'install.packages("https://cran.r-project.org/src/contrib/Archive/RcppAnnoy/RcppAnnoy_0.0.14.tar.gz", repos=NULL, type="source")'

  # installing from bioc
  R --vanilla --slave -e 'library(BiocManager) ; BiocManager::install("MAST")'
  R --vanilla --slave -e 'library(BiocManager) ; BiocManager::install("clusterProfiler")'
  R --vanilla --slave -e 'library(BiocManager) ; BiocManager::install("org.Hs.eg.db")'
  R --vanilla --slave -e 'library(BiocManager) ; BiocManager::install("DropletUtils")'
  R --vanilla --slave -e 'library(BiocManager) ; BiocManager::install("batchelor")'

  # installing packages from Github
  R --vanilla --slave -e 'library(remotes); remotes::install_github("satijalab/seurat-wrappers", ref="1e814d16664b73a25b1430a3928641e91f6f8759")'
  R --vanilla --slave -e 'library(remotes); remotes::install_github("theislab/kBET", ref="4c9dafab2e4183422ad76bfcb65ca50eac1277e4")'
